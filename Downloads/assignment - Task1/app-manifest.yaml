# ServiceAccount for the application pod
apiVersion: v1
kind: ServiceAccount
metadata:
  name: task-api-sa
---
# Role to allow creating, getting logs from, and deleting pods
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-manager-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["create", "get", "list", "watch", "delete"]
---
# RoleBinding to grant the Role to our ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-manager-binding
subjects:
- kind: ServiceAccount
  name: task-api-sa
roleRef:
  kind: Role
  name: pod-manager-role
  apiGroup: rbac.authorization.k8s.io
---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: task-api
  template:
    metadata:
      labels:
        app: task-api
    spec:
      serviceAccountName: task-api-sa # Use the service account
      containers:
        - name: task-api
          image: your-username/task-api:2.0 # IMPORTANT: Use your image name
          ports:
            - containerPort: 8080
          [cite_start]env: # Configure MongoDB connection via environment variables [cite: 90]
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://mongodb-service:27017/kaiburr_tasks"
---
# Application Service (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: task-api-service
spec:
  type: NodePort # Exposes the service on each Node's IP at a static port
  selector:
    app: task-api
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30001 # Port to access from outside the cluster